""" from flask import Flask, jsonify, render_template, send_from_directory, request, redirect, url_for
import os
import database as db
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user

# Definimos la ruta absoluta del proyecto
project_dir = os.path.abspath(os.path.dirname(__file__))

# Crear la aplicación Flask con la carpeta de plantillas configurada a la raíz del proyecto
app = Flask(__name__, template_folder=project_dir)
app.secret_key = 'test'

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'loginnew'

class User(UserMixin):
    def __init__(self, id):
        self.id = id

@login_manager.user_loader
def load_user(user_id):
    user = db.get_user(user_id)
    if user:
        return User(user_id)
    return None

@app.route('/login')
def loginnew():
    return render_template('/views/login.html')

@app.route('/')
@login_required
def home():
    return render_template('index.html')

@app.route('/login', methods=['POST'])
def login():
    nombre = request.form['nombre']
    password = request.form['password']
    user = db.get_user(nombre)
    if user and user['password'] == password:
        user_obj = User(nombre)
        login_user(user_obj)
        return redirect(url_for('home'))
    return redirect(url_for('loginnew'))

# Rutas para servir archivos estáticos
@app.route('/css/<path:filename>')
def send_css(filename):
    return send_from_directory(os.path.join(project_dir, 'css'), filename)

@app.route('/js/<path:filename>')
def send_js(filename):
    return send_from_directory(os.path.join(project_dir, 'js'), filename)

@app.route('/src/<path:filename>')
def send_src(filename):
    return send_from_directory(os.path.join(project_dir, 'src'), filename)

@app.route('/views/<path:filename>')
def send_views(filename):
    return send_from_directory(os.path.join(project_dir, 'views'), filename)

# Ruta para guardar productos
@app.route('/productos', methods=['POST'])
@login_required
def addproductos():
    nombre = request.form['nombre']
    cantidad = request.form['cantidad']
    precio = request.form['precio']
    proveedor = request.form['proveedor']
    categoria = request.form['categoria']
    imagen = request.form['imagen']
    if nombre and cantidad and precio and proveedor and categoria:
        cursor = db.database.cursor()
        sql = "INSERT INTO productos (nombre, cantidad, precio, proveedor, categoria, imagen) VALUES (%s, %s, %s, %s, %s, %s)"
        data = (nombre, cantidad, precio, proveedor, categoria, imagen)
        cursor.execute(sql, data)
        db.database.commit()
    return redirect(url_for('home'))

# Ruta para guardar proveedores
@app.route('/proveedor', methods=['POST'])
@login_required
def addproveedor():
    nombre = request.form['nombre']
    telefono = request.form['telefono']
    mail = request.form['mail']
    if nombre and telefono and mail:
        cursor = db.database.cursor()
        sql = "INSERT INTO proveedores (nombre, telefono, mail) VALUES (%s, %s, %s)"
        data = (nombre, telefono, mail)
        cursor.execute(sql, data)
        db.database.commit()
    return redirect(url_for('home'))

# Ruta para guardar categorías
@app.route('/categoria', methods=['POST'])
@login_required
def addcategoria():
    nombre = request.form['nombre']
    proveedor = request.form['proveedor']
    if nombre and proveedor:
        cursor = db.database.cursor()
        sql = "INSERT INTO categoria (nombre, proveedor) VALUES (%s, %s)"
        data = (nombre, proveedor)
        cursor.execute(sql, data)
        db.database.commit()
    return redirect(url_for('home'))

# Ruta para guardar pedidos
@app.route('/pedido', methods=['POST'])
@login_required
def addpedido():
    nombre = request.form['nombre']
    mail = request.form['mail']
    telefono = request.form['telefono']
    direccion = request.form['direccion']
    categoria = request.form['categoria']
    cantidad = request.form['cantidad']
    descripcion = request.form['descripcion']
    if nombre and mail and cantidad and telefono and direccion and categoria and descripcion:
        cursor = db.database.cursor()
        sql = "INSERT INTO pedidos (nombre, mail, telefono, direccion, categoria, cantidad, descripcion) VALUES (%s, %s, %s, %s, %s, %s, %s)"
        data = (nombre, mail, telefono, direccion, categoria, cantidad, descripcion)
        cursor.execute(sql, data)
        db.database.commit()
    return redirect(url_for('home'))

# Ruta para guardar consultas de contacto
@app.route('/contacto', methods=['POST'])
@login_required
def addconsulta():
    nombre = request.form['nombre']
    consulta = request.form['consulta']
    mail = request.form['mail']
    if nombre and consulta and mail:
        cursor = db.database.cursor()
        sql = "INSERT INTO contacto (nombre, consulta, mail) VALUES (%s, %s, %s)"
        data = (nombre, consulta, mail)
        cursor.execute(sql, data)
        db.database.commit()
    return redirect(url_for('home'))

# Rutas para obtener datos
@app.route('/views/proveedores', methods=['GET'])
@login_required
def getproveedores():
    try:
        cursor = db.database.cursor()
        cursor.execute("SELECT * FROM proveedores")
        resultado = cursor.fetchall()
        insertarObjetos = []
        nombreColumnas = [columna[0] for columna in cursor.description]
        for unregistro in resultado:
            insertarObjetos.append(dict(zip(nombreColumnas, unregistro)))
        cursor.close()
        return jsonify(insertarObjetos)
    except Exception as e:
        print(f"Error obteniendo proveedores: {e}")
        return jsonify({"error": "No se pudieron obtener los proveedores"}), 500

@app.route('/views/categorias', methods=['GET'])
@login_required
def getcategorias():
    try:
        cursor = db.database.cursor()
        cursor.execute("SELECT * FROM categoria")
        resultado = cursor.fetchall()
        insertarObjetos = []
        nombreColumnas = [columna[0] for columna in cursor.description]
        for unregistro in resultado:
            insertarObjetos.append(dict(zip(nombreColumnas, unregistro)))
        cursor.close()
        return jsonify(insertarObjetos)
    except Exception as e:
        print(f"Error obteniendo categorías: {e}")
        return jsonify({"error": "No se pudieron obtener las categorías"}), 500

@app.route('/views/productos', methods=['GET'])
@login_required
def getallproductos():
    try:
        cursor = db.database.cursor()
        cursor.execute("SELECT * FROM productos")
        resultado = cursor.fetchall()
        insertarObjetos = []
        nombreColumnas = [columna[0] for columna in cursor.description]
        for unregistro in resultado:
            insertarObjetos.append(dict(zip(nombreColumnas, unregistro)))
        cursor.close()
        return jsonify(insertarObjetos)
    except Exception as e:
        print(f"Error obteniendo productos: {e}")
        return jsonify({"error": "No se pudieron obtener los productos"}), 500

@app.route('/db_status', methods=['GET'])
@login_required
def get_db_status():
    cursor = db.database.cursor()
    cursor.execute("SHOW STATUS LIKE 'Threads_connected'")
    threads_connected = cursor.fetchone()
    cursor.execute("SHOW STATUS LIKE 'Threads_running'")
    threads_running = cursor.fetchone()
    cursor.execute("SHOW STATUS LIKE 'Connections'")
    total_connections = cursor.fetchone()
    cursor.close()
    status = {
        "threads_connected": threads_connected[1],
        "threads_running": threads_running[1],
        "total_connections": total_connections[1]
    }
    return jsonify(status)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect('/login')

# Ejecución directa de este archivo en modo de desarrollador en el puerto 4000 del localhost o servidor local creado por Flask.
if __name__ == '__main__':
    app.run(debug=True, port=4000) """
